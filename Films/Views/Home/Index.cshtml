<div id="app">
    <div v-if="!EditMode">
        <el-row>
            <el-button v-on:click="FilmAdd">
                <i class="el-icon-circle-plus-outline el-icon--left"></i>Добавить
            </el-button>
            <el-button :disabled="CurrentRow == null || FilmCount == 0" v-on:click="FilmEdit">
                <i class="el-icon-edit el-icon--left"></i>Редактировать
            </el-button>
            <el-button :disabled="CurrentRow == null || FilmCount == 0" v-on:click="FilmDelete">
                <i class="el-icon-remove-outline el-icon--left"></i>Удалить
            </el-button>
        </el-row>
        <el-row>
            <el-table ref="FilmTable" :data="Films" highlight-current-row v-on:current-change="handleCurrentChange" style="width: 100%; font-family: 'Arial';">
                @*<el-table-column type="index" width="50" ></el-table-column>*@
                @*<el-table-column property="FilmId" width="50"></el-table-column>*@
                <el-table-column width="50">
                    <template slot-scope="scope">
                        <el-tooltip placement="top" effect="light">
                            <div slot="content" style="font-family: 'Arial';">{{ scope.row.Notice }}</div>
                            <span class="el-icon-info"></span>
                        </el-tooltip>
                    </template>
                </el-table-column>
                <el-table-column property="FilmName" label="Название"></el-table-column>
                <el-table-column property="Year" label="Год выпуска" width="140"></el-table-column>
                <el-table-column property="Country.CountryName" label="Страна" width="200"></el-table-column>
                <el-table-column property="Director.DirectorName" label="Режиссер" width="250"></el-table-column>
                <el-table-column property="Actors" label="Актеры"></el-table-column>
                <el-table-column property="Ganres" label="Жанр"></el-table-column>
            </el-table>
            @*<div style="margin-top: 20px">
                <el-button v-on:click="setCurrent(Films[1])">Select second row</el-button>
                <el-button v-on:click="setCurrent()">Clear selection</el-button>
            </div>*@
        </el-row>
        <el-row>
            <el-pagination layout="prev, pager, next"
                           :page-size="PageSize"
                           :pager-count="5"
                           :total="FilmCount"
                           :current-page.sync="CurrentPage"
                           v-on:current-change="handleCurrentChangePage">
            </el-pagination>
        </el-row>
    </div>
    <div v-if="EditMode">
        <el-button v-on:click="FilmEditBack">
            <i class="el-icon-back el-icon--left"></i>Назад
        </el-button>
    </div>
</div>

<script>
    var app = new Vue({
        el: '#app',
        
        data: {
            Films: null,
            CurrentFilm: null,
                        
            EditMode: false,
            CurrentRow: null,
            CurrentPage: 1,

            PageSize: 3,
            FilmCount: 0            
        },

        mounted: function () {
            this.FilmsCount();
            this.FilmsInit(1, this.PageSize);
        },

        methods: {
            FilmsCount() {
                window.axios.get(`/api/films/count`).then(function (response) {
                    app.FilmCount = response.data;
                })
                .catch(function (error) {
                    console.log(error);
                });
            },

            FilmsInit(page, size) {
                page = page != undefined ? page : null;
                size = size != undefined ? size : null;

                window.axios.get(`/api/films/list?page=${page}&size=${size}`)
                    .then(function (response) {
                        app.Films = response.data;
                        app.CurrentRow = null;
                    })
                    .catch(function (error) {
                        app.Films = null;
                        console.log(error);
                    });
            },

            FilmInit(id) {
                window.axios.get(`/api/films/list/${id}`)
                    .then(function (response) {
                        app.CurrentFilm = response.data;                        
                    })
                    .catch(function (error) {
                        app.CurrentFilm = null;                        
                        console.log(error);
                    });
            },

            FilmDelete() {
                app.$confirm('Удалить выбранный фильм?', 'Внимание', {
                    confirmButtonText: 'OK',
                    cancelButtonText: 'Отмена',
                    type: 'warning'
                }).then(() => {
                    window.axios.delete(`/api/films/delete/${app.CurrentRow.FilmId}`)
                        .then(function (response) {
                            app.CurrentPage = 1;
                            app.FilmsInit(1, this.PageSize);
                            app.FilmsCount();
                            app.$message({ type: 'success', message: 'Удаление завершено' });
                        })
                        .catch(function (error) {
                            console.log(error);
                            app.$message({ type: 'info', message: 'Удаление отменено' });
                        });                    
                }).catch((error) => {
                    console.log(error);
                    app.$message({ type: 'info', message: 'Удаление отменено' });
                });                
            },

            FilmEdit() {
                this.EditMode = true;

                //window.axios({
                //    method: 'PUT',
                //    url: '/api/films/edit',
                //    data: app.CurrentRow
                //})
                //.then(function (response) {                    
                //    app.FilmsInit();
                //    app.Film3 = response.data;
                //})
                //.catch(function (error) {
                //    console.log(error);
                //});
            },

            FilmAdd() {
                this.EditMode = true;

                //window.axios({
                //        method: 'POST',
                //        url: '/api/films/add',
                //    data: {
                //        FilmId: 0
                //    }
                //    })
                //    .then(function (response) {                        
                //        app.FilmsInit(1, this.PageSize);
                //        app.FilmInit(response.data.FilmId);
                //    })
                //    .catch(function (error) {
                //        console.log(error);
                //    });
            },

            FilmEditBack() {
                this.EditMode = false;
            },

            //-----------------------------------------------------------------------------
            handleCurrentChange(val) {
                this.CurrentRow = val;
            },

            handleCurrentChangePage(val) {
                this.FilmsInit(this.CurrentPage, this.PageSize);
            }
        }
    });
</script>
